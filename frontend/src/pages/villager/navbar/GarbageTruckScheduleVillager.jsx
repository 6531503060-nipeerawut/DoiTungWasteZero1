import React, { useEffect, useState } from 'react';
import axios from 'axios';
import 'bootstrap/dist/css/bootstrap.min.css';
import 'bootstrap/dist/js/bootstrap.bundle.min.js';
import Header from '../components/Header';
import Footer from '../components/Footer';
import UnauthorizedMessage from '../../../components/UnauthorizedMessage';

axios.defaults.withCredentials = true;

function GarbageTruckScheduleVillager() {
    document.title = "DoiTung Zero-Waste";
    const [selectedDay, setSelectedDay] = useState(null);

    const [auth, setAuth] = useState(false);
    const [loading, setLoading] = useState(true);
    const [message, setMessage] = useState('');
    const [villId, setVillId] = useState(null);

    useEffect(() => {
        const fetchAuthStatus = async () => {
            try {
                const res = await axios.get(`${process.env.REACT_APP_BACKEND_URL}/v/garbagetruckschedulevillager`, { withCredentials: true });

                if (res.data.status?.toLowerCase() === "success") {
                    setAuth(true);
                    setVillId(res.data.vill_id);
                } else {
                    setAuth(false);
                    setMessage(res.data.error || "Unauthorized access");
                }
            } catch (err) {
                console.log("Error fetching auth status:", err);
                setMessage("Error connecting to server");
            } finally {
                setLoading(false);
            }
        };
        fetchAuthStatus();
    }, []);

    if (loading) {
        return (
            <div className="d-flex justify-content-center align-items-center min-vh-100">
                <h3>Loading...</h3>
            </div>
        );
    }

    const garbageData = {
        Monday: {
            type: '‡∏Ç‡∏¢‡∏∞‡πÄ‡∏õ‡∏µ‡∏¢‡∏Å ‡πÄ‡∏õ‡∏µ‡∏¢‡∏Å‡∏ô‡πâ‡∏≥',
            examples: ['‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å', '‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©', '‡πÇ‡∏ü‡∏° ‡∏ü‡∏≠‡∏á‡∏ô‡πâ‡∏≥', '‡∏ñ‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô', '‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤'],
        },
        Tuesday: {
            type: '‡∏Ç‡∏¢‡∏∞‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏¥‡∏á ‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô',
            examples: ['‡∏ñ‡∏∏‡∏á‡∏Ç‡∏ô‡∏°', '‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡πÄ‡∏Å‡πà‡∏≤', '‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ô‡∏°'],
        },
        Wednesday: {
            type: '‡∏Ç‡∏¢‡∏∞‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥',
            examples: ['‡∏ú‡πâ‡∏≤‡∏≠‡∏ô‡∏≤‡∏°‡∏±‡∏¢', '‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏Å‡∏≠‡∏ô‡∏≤‡∏°‡∏±‡∏¢', '‡πÅ‡∏û‡∏°‡πÄ‡∏û‡∏¥‡∏™'],
        },
        Friday: {
            type: '‡∏Ç‡∏¢‡∏∞‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)',
            examples: ['‡∏´‡∏•‡∏≠‡∏î‡πÑ‡∏ü', '‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà', '‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ', '‡∏™‡πÄ‡∏õ‡∏£‡∏¢‡πå'],
        },
    };

    const handleClick = (day) => {
        setSelectedDay(day);
    };

    return (
        <div className='d-flex flex-column min-vh-100'>
            {auth ? (
                <>
                    {/* Header */}
                    <Header type="menu" villId={villId} />

                    {/* Garbage Schedule */}
                    <div className="container my-4">
                        <h2 className="mb-4">üìÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏ñ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏¢‡∏∞</h2>
                        <div className="d-flex flex-wrap gap-2 mb-4">
                            <button className="btn btn-outline-primary" onClick={() => handleClick('Monday')}>‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå</button>
                            <button className="btn btn-outline-primary" onClick={() => handleClick('Tuesday')}>‡∏ß‡∏±‡∏ô‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£</button>
                            <button className="btn btn-outline-primary" onClick={() => handleClick('Wednesday')}>‡∏ß‡∏±‡∏ô‡∏û‡∏∏‡∏ò</button>
                            <button className="btn btn-outline-primary" onClick={() => handleClick('Friday')}>‡∏ß‡∏±‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå</button>
                        </div>

                        {selectedDay && (
                            <div className="card shadow-sm">
                                <div className="card-body">
                                    <h5 className="card-title">üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô{{
                                        Monday: '‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå',
                                        Tuesday: '‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£',
                                        Wednesday: '‡∏û‡∏∏‡∏ò',
                                        Friday: '‡∏®‡∏∏‡∏Å‡∏£‡πå'
                                    }[selectedDay]}</h5>
                                    <p><strong>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏¢‡∏∞:</strong> {garbageData[selectedDay].type}</p>
                                    <p><strong>‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡∏¢‡∏∞:</strong></p>
                                    <ul>
                                        {garbageData[selectedDay].examples.map((item, index) => (
                                            <li key={index}>- {item}</li>
                                        ))}
                                    </ul>
                                </div>
                            </div>
                        )}
                    </div>

                    {/* Footer */}
                    <Footer />
                </>
            ) : (
                <UnauthorizedMessage message={message} />
            )}
        </div>
    );
}

export default GarbageTruckScheduleVillager;